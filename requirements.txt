CoderHack
    Problem Statement
        1. Develop a REST-ful API service using Spring Boot to manage the Leaderboard for a Coding Platform while using MongoDB to persist the data.
        Problem Description
        2. While coding platforms usually host multiple contests while maintaining numerous leaderboards, this assignment requires you to design a service for managing the leaderboard of a specific contest. Assume the platform has only one contest with a single leaderboard. The platform also gives virtual awards to the users called Badges based on their score.
    Requirements
        1. The API must handle CRUD operations for competing user registrations
        2. Each user has the following fields:
            User ID (Unique Identifier)
            Username
            Score (0 <= Score <= 100)
            Badges (Code Ninja, Code Champ, Code Master)
        3. User registration requests must have a User ID and Username
        4. The score must be 0, and the badges must be empty initially after the registration
        5. Update through PUT requests is only allowed for Score
        6. Badges must be awarded based on the score:
            1 <= Score < 30 -> Code Ninja
            30 <= Score < 60 -> Code Champ
            60 <= Score <= 100 -> Code Master
        7. A user can only have a maximum of three unique badges
            {Code Ninja, Code Champ, Code Master} -> Valid
            {Code Ninja} -> Valid
            {Code Ninja, Code Champ, Code Master, Code Ninja} -> Invalid
        8. User retrieval must be sorted based on the score
        9. Sorting should have the time complexity of O(nlogn)
        10. Include basic JUnit test cases to verify the operations
        11. Validation and Error Handling
            Add basic validation for all fields (Ex. Score > 0)
            Handle common errors and return appropriate HTTP codes (Ex. 404, User not found)
    Endpoints
        GET /users - Retrieve a list of all registered users
        GET /users/{userId} - Retrieve the details of a specific user
        POST /users - Register a new user to the contest
        PUT /users/{userId} - Update the score of a specific user
        DELETE /users/{userId} - Deregister a specific user from the contest
    Publishing and Documentation
        i. Publish your code to a public GitHub repository
        ii. Write meaningful commit messages (optional)
        iii. Include a descriptive README.MD for your application codebase
        iv. Create and add a public Postman Collection in the README.MD
    Additional Notes
        Implement the solution using a layered approach - Ex. Entity, Controller, Service, Repository
